package com.latinaut.samyct.controller;

import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.latinaut.samyct.bean.Empleado;
import com.latinaut.samyct.exception.ResourceNotFoundException;
import com.latinaut.samyct.service.EmpleadoService;

@RestController
@RequestMapping("api/v1/empleados")
public class EmpleadoController {
    
    @Autowired
    private EmpleadoService service;

    @GetMapping
    public List<Empleado>getEmpleados() {
        return service.listarTodos();
    }

    @GetMapping(path = "{empleadoId}")
    public Empleado getEmpleado(@PathVariable Integer empleadoId) {
        return service.buscar(empleadoId)
                .orElseThrow(() -> new ResourceNotFoundException("empleado " + empleadoId + " no encontrado"));
    }
    
    
    public Set<Empleado> getEmpleadoFuncion() {
    	return null;
    }

    @PostMapping
    public Empleado saveEmpleado(@RequestBody Empleado empleado) {
        return service.guardar(empleado);
    }

    @PutMapping(path="{empleadoId}")
    public Empleado updateEmpleado(@RequestBody Empleado empleadoRequest, @PathVariable Integer empleadoId) {
        return service.buscar(empleadoId)
                .map(empleado -> {
                    empleado.setNombre(empleadoRequest.getNombre());
                    empleado.setApellidos(empleadoRequest.getApellidos());
                    empleado.setEmail(empleadoRequest.getEmail());
                    empleado.setTelefono(empleadoRequest.getTelefono());
                    empleado.setFuncion(empleadoRequest.getFuncion());
                    empleado.setSalario(empleadoRequest.getSalario());
                    empleado.setComision(empleadoRequest.getComision());
                    return service.guardar(empleado);
                }).orElseThrow(() -> new ResourceNotFoundException("Empleado " + empleadoId + " no encontrado"));
    }

    @DeleteMapping(path="{empleadoId}")
    public ResponseEntity<?> deleteEmpleado(@PathVariable Integer empleadoId) {
        return service.buscar(empleadoId)
                .map(empleado -> {
                    service.eliminar(empleado);
                    return ResponseEntity.ok().build();
                }).orElseThrow(() -> new ResourceNotFoundException("Empleado " + empleadoId + " no encontrado"));
    }
}
