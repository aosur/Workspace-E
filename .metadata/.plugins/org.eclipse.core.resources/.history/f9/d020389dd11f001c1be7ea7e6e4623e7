package com.latinaut.samyct.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.latinaut.samyct.bean.Cliente;
import com.latinaut.samyct.exception.ResourceNotFoundException;
import com.latinaut.samyct.service.ClienteService;

@RestController
@RequestMapping("api/v1/clientes")
@CrossOrigin(origins = )
public class ClienteController {

    @Autowired
    private ClienteService service;

    @GetMapping
    public List<Cliente> getClientes() {
        List<Cliente> listarTodos = service.listarTodos();
        return listarTodos;
    }

    @PostMapping
    public Cliente saveCliente(@RequestBody Cliente cliente) {
        return service.guardar(cliente);
    }

    @GetMapping(path="{clienteId}")
    public Cliente getClientes(@PathVariable Integer clienteId) {
        return service.buscar(clienteId)
                .orElseThrow(() -> new ResourceNotFoundException("cliente " + clienteId + " no existe"));
    }

    @PutMapping(path="{clienteId}")
    public Cliente updateCliente(@RequestBody Cliente clienteRequest, @PathVariable Integer clienteId) {
        return service.buscar(clienteId)
                .map(cliente -> {
                    cliente.setNombre(clienteRequest.getNombre());
                    cliente.setRuc(clienteRequest.getRuc());
                    cliente.setDireccion(clienteRequest.getDireccion());
                    cliente.setTelefono(clienteRequest.getTelefono());
                    return service.guardar(cliente);
                }).orElseThrow(() -> new ResourceNotFoundException("cliente " + clienteId + " no encontrado"));
    }

    @DeleteMapping(path="{clienteId}")
    public ResponseEntity<?> deleteCliente(@PathVariable Integer clienteId) {
        return service.buscar(clienteId)
                .map(cliente -> {
                    service.eliminar(cliente);
                    return ResponseEntity.ok().build();
                }).orElseThrow(() -> new ResourceNotFoundException("cliente " + clienteId + " no encontrado"));
    }

}
