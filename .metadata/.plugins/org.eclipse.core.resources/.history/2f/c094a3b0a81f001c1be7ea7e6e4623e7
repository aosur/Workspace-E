package com.latinaut.samyct.controller;

import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.latinaut.samyct.bean.Orden;
import com.latinaut.samyct.exception.ResourceNotFoundException;
import com.latinaut.samyct.service.ContactoService;
import com.latinaut.samyct.service.EquipoService;
import com.latinaut.samyct.service.OrdenService;
import com.latinaut.samyct.service.UsuarioService;
import com.latinaut.samyct.util.ICodVerifi;
import com.latinaut.samyct.util.criteria.OrdenCriteria;

@RestController
@RequestMapping("api/v1/")
public class OrdenController {
	
	@Autowired
	private ICodVerifi codVerifi;

	@Autowired
	private OrdenService ordenService;
	
	@Autowired
	private ContactoService contactoService;
	
	@Autowired
	private UsuarioService usuarioService;
	
	@Autowired
	private EquipoService equipoService;
	
	@GetMapping("equipos/{equipoId}/ordenes")
	public Set<Orden> getAllOrdenesByEquipo(@PathVariable Integer equipoId) {
		return ordenService.buscarPorEquipoId(equipoId);
	}
	
	@PutMapping("equipos/{equipoId}/ordenes/{ordenId}")
	public Set<Orden> updateOrden(@PathVariable Integer equipoId, @PathVariable Integer ordenId,
				@RequestBody Orden ordenRequest) {
		
		if(!equipoService.existeEquipo(equipoId))
			throw new ResourceNotFoundException("equipo " + equipoId + " no encontrado");
		
		return ordenService.buscar(ordenId)
				.map(orden -> {
					orden.setProblema(ordenRequest.getProblema());
					orden.setFechaIngreso(ordenRequest.getFechaIngreso());
					orden.setTipo(ordenRequest.getTipo());
					orden.setOrdenExt(ordenRequest.getOrdenExt());
					orden.setObsInterna(ordenRequest.getObsInterna());
					orden.setObsExterna(ordenRequest.getObsExterna());
					orden.setVisita(ordenRequest.getVisita());
					return ordenService.guardar(orden);
				}).orElseThrow(() -> new ResourceNotFoundException("orden " + ordenId + " no encontrado"));
	}
	
	@GetMapping("/ordenes/calculatecurrent")
	public int getCurrenOrdenNumber() {
		return ordenService.nroOrdenActual();
	}
	
	@PostMapping("ordenes")
	public Orden createOrden(@RequestBody OrdenCriteria ordenCriteria) {
		
		Integer contId = ordenCriteria.getContactoId();
		Integer empId = ordenCriteria.getUsuarioId();
		Integer equiId = ordenCriteria.getEquipoId();
		Orden orden = ordenCriteria.getOrden();
				
		return contactoService.buscar(contId)
					.map(contacto -> {
						orden.setContacto(contacto);
						return usuarioService.buscar(empId).get();
					}).map(usuario -> {
						orden.setUsuario(usuario);
						return equipoService.buscar(equiId).get();
					}).map(equipo -> {
						orden.setEquipo(equipo);
						orden.setCodVerifi(codVerifi.getCodigoVerifi());
						return ordenService.guardar(orden);
					}).orElseThrow(() -> new IllegalStateException("fallo al guardar la orden"));	
	}
	
}
